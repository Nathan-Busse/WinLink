diff --git a/setup.sh b/setup.sh
index 0debe4d..6aeea08 100755
--- a/setup.sh
+++ b/setup.sh
@@ -39,8 +39,8 @@ readonly SYS_BIN_PATH="/usr/local/bin"                  # UNIX path to 'bin' dir
 readonly USER_BIN_PATH="${HOME}/.local/bin"             # UNIX path to 'bin' directory for a '--user' Winux installation.
 readonly USER_BIN_PATH_WIN='\\tsclient\home\.local\bin' # WINDOWS path to 'bin' directory for a '--user' Winux installation.
 # 'SOURCE'
-readonly SYS_SOURCE_PATH="${SYS_BIN_PATH}/winlink-src" # UNIX path to Winux source directory for a '--system' Winux installation.
-readonly USER_SOURCE_PATH="${USER_BIN_PATH}/winlink-src" # UNIX path to Winux source directory for a '--system' Winux installation.
+readonly SYS_SOURCE_PATH="@out@/src" # UNIX path to Winux source directory for a '--system' Winux installation.
+readonly USER_SOURCE_PATH="@out@/src" # UNIX path to Winux source directory for a '--system' Winux installation.
 # 'APP'
 readonly SYS_APP_PATH="/usr/share/applications"                        # UNIX path to 'applications' directory for a '--system' Winux installation.
 readonly USER_APP_PATH="${HOME}/.local/share/applications"             # UNIX path to 'applications' directory for a '--user' Winux installation.
@@ -70,7 +70,7 @@ readonly TEST_PATH_WIN="${USER_APPDATA_PATH_WIN}\\FreeRDP_Connection_Test" # WIN
 # 'Winux Configuration File'
 readonly CONFIG_PATH="${HOME}/.config/winlink/winlink.conf" # UNIX path to the Winux configuration file.
 # 'Inquirer Bash Script'
-readonly INQUIRER_PATH="./install/inquirer.sh" # UNIX path to the 'inquirer' script, which is used to produce selection menus.
+readonly INQUIRER_PATH="@out@/src/install/inquirer.sh" # UNIX path to the 'inquirer' script, which is used to produce selection menus.
 
 # REMOTE DESKTOP CONFIGURATION
 readonly RDP_PORT=3389         # Port used for RDP on Windows.
@@ -155,13 +155,6 @@ function waGetSourceCode() {
         echo -e "${WARNING_TEXT}[WARNING]${CLEAR_TEXT} You might want to remove your old installation on '${SCRIPT_DIR_PATH}'."
     fi
 
-    if [[ ! -d "$SOURCE_PATH" ]]; then
-        $SUDO git clone --recurse-submodules --remote-submodules https://github.com/winlink-org/winlink.git "$SOURCE_PATH"
-    else
-        echo -e "${INFO_TEXT}Winux installation already present at ${CLEAR_TEXT}${COMMAND_TEXT}${SOURCE_PATH}${CLEAR_TEXT}${INFO_TEXT}. Updating...${CLEAR_TEXT}"
-        $SUDO git -C "$SOURCE_PATH" pull --no-rebase
-    fi
-
     # Silently change the working directory.
     if ! cd "$SOURCE_PATH" &>/dev/null; then
         # Display the error type.
@@ -186,21 +179,8 @@ function waGetSourceCode() {
 # Name: 'waGetInquirer'
 # Role: Loads the inquirer script, even if the source isn't cloned yet
 function waGetInquirer() {
-    local INQUIRER=$INQUIRER_PATH
-
-    if [ -d "$SYS_SOURCE_PATH" ]; then
-        INQUIRER=$SYS_SOURCE_PATH/$INQUIRER_PATH
-    elif [ -d "$USER_SOURCE_PATH" ] ; then
-        INQUIRER=$USER_SOURCE_PATH/$INQUIRER_PATH
-    else
-        INQUIRER="/tmp/waInquirer.sh"
-        rm -f "$INQUIRER"
-
-        curl -o "$INQUIRER" "https://raw.githubusercontent.com/winlink-org/winlink/main/install/inquirer.sh"
-    fi
-
     # shellcheck source=/dev/null # Exclude this file from being checked by ShellCheck.
-    source "$INQUIRER"
+    source "$INQUIRER_PATH"
 }
 
 # Name: 'waCheckInput'
@@ -805,7 +785,7 @@ function waCheckGroupMembership() {
     # Identify groups the current user belongs to.
     USER_GROUPS=$(groups "$(whoami)")
 
-    if ! (echo "$USER_GROUPS" | grep -q -E "\blibvirt\b") || ! (echo "$USER_GROUPS" | grep -q -E "\bkvm\b"); then
+    if ! (echo "$USER_GROUPS" | grep -q -E "\blibvirtd\b") || ! (echo "$USER_GROUPS" | grep -q -E "\bkvm\b"); then
         # Complete the previous line.
         echo -e "${FAIL_TEXT}Failed!${CLEAR_TEXT}\n"
 
@@ -1239,11 +1219,11 @@ function waConfigureWindows() {
     # Populate variables.
     WIN_BASH="\
 #!/usr/bin/env bash
-${BIN_PATH}/winlink windows"
+@out@/bin/winlink windows"
     WIN_DESKTOP="\
 [Desktop Entry]
 Name=Windows
-Exec=${BIN_PATH}/winlink windows %F
+Exec=@out@/bin/winlink windows %F
 Terminal=false
 Type=Application
 Icon=${APPDATA_PATH}/icons/windows.svg
@@ -1290,13 +1270,13 @@ function waConfigureApp() {
     # Determine the content of the bash script for the application.
     APP_BASH="\
 #!/usr/bin/env bash
-${BIN_PATH}/winlink ${1}"
+@out@/bin/winlink ${1}"
 
     # Determine the content of the '.desktop' file for the application.
     APP_DESKTOP_FILE="\
 [Desktop Entry]
 Name=${NAME}
-Exec=${BIN_PATH}/winlink ${1} %F
+Exec=@out@/bin/winlink ${1} %F
 Terminal=false
 Type=Application
 Icon=${APP_ICON}
@@ -1550,7 +1530,7 @@ function waInstall() {
     echo -e "${BOLD_TEXT}Installing Winux.${CLEAR_TEXT}"
 
     # Check for existing conflicting Winux installations.
-    waCheckExistingInstall
+    # waCheckExistingInstall
 
     # Load the Winux configuration file.
     waLoadConfig
@@ -1626,8 +1606,8 @@ function waInstall() {
     waFindInstalled
 
     # Install the Winux bash scripts.
-    $SUDO ln -sf "${SOURCE_PATH}/bin/winlink" "${BIN_PATH}/winlink"
-    $SUDO ln -sf "${SOURCE_PATH}/setup.sh" "${BIN_PATH}/winlink-setup"
+
+
 
     # Configure the Windows RDP session application launcher.
     waConfigureWindows
@@ -1677,18 +1657,15 @@ function waUninstall() {
     local DESKTOP_FILE_NAME=""        # Stores the name of the '.desktop' file for the application.
     local BASH_SCRIPT_NAME=""         # Stores the name of the application.
 
-    # Remove the 'Winux' bash scripts.
-    $SUDO rm -f "${BIN_PATH}/winlink"
-    $SUDO rm -f "${BIN_PATH}/winlink-setup"
-
     # Remove Winux configuration data, temporary files and logs.
+    chmod -R +rw "$USER_APPDATA_PATH"
     rm -rf "$USER_APPDATA_PATH"
 
     # Remove application icons and shortcuts.
     $SUDO rm -rf "$APPDATA_PATH"
 
     # Store '.desktop' files containing "${BIN_PATH}/winlink" in an array, returning an empty array if no such files exist.
-    readarray -t WINUX_DESKTOP_FILES < <(grep -l -d skip "${BIN_PATH}/winlink" "${APP_PATH}/"* 2>/dev/null || true)
+    readarray -t WINUX_DESKTOP_FILES < <(grep -l -d skip "@out@/bin/winlink" "${APP_PATH}/"* 2>/dev/null || true)
 
     # Remove each '.desktop' file.
     for DESKTOP_FILE_PATH in "${WINUX_DESKTOP_FILES[@]}"; do
@@ -1709,7 +1686,7 @@ function waUninstall() {
     done
 
     # Store the paths of bash scripts calling 'Winux' to launch specific applications in an array, returning an empty array if no such files exist.
-    readarray -t WINUX_APP_BASH_SCRIPTS < <(grep -l -d skip "${BIN_PATH}/winlink" "${BIN_PATH}/"* 2>/dev/null || true)
+    readarray -t WINUX_APP_BASH_SCRIPTS < <(grep -l -d skip "@out@/bin/winlink" "${BIN_PATH}/"* 2>/dev/null || true)
 
     # Remove each bash script.
     for BASH_SCRIPT_PATH in "${WINUX_APP_BASH_SCRIPTS[@]}"; do
@@ -1730,10 +1707,9 @@ function waUninstall() {
     done
 
     # Print caveats.
-    echo -e "\n${INFO_TEXT}Please note that your Winux configuration and the Winux source code were not removed.${CLEAR_TEXT}"
-    echo -e "${INFO_TEXT}You can remove these manually by running:${CLEAR_TEXT}"
+    echo -e "\n${INFO_TEXT}Please note that your Winux configuration and the Winux package were not removed.${CLEAR_TEXT}"
+    echo -e "${INFO_TEXT}You can remove your config manually by running:${CLEAR_TEXT}"
     echo -e "${COMMAND_TEXT}rm -r $(dirname "$CONFIG_PATH")${CLEAR_TEXT}"
-    echo -e "${COMMAND_TEXT}rm -r ${SOURCE_PATH}${CLEAR_TEXT}\n"
 
     # Print feedback.
     echo -e "${SUCCESS_TEXT}UNINSTALLATION COMPLETE.${CLEAR_TEXT}"
